import ErrorHandler from "@/Error";
import { sendResponse } from "../../../../../CORE/utils/response.handler/index.js";
import StorybookGenerator from "../../../../../CORE/services/openai/generateBookTemplate/index.js";
import logger from "../../../../../CORE/utils/logger/index.js";
const storybookGenerator = new StorybookGenerator();

export const createBookTemplate = async (req, res, next) => {
  try {
    const userId = req.user.id;
    const {
      theme,
      name,
      photo_url,
      skin_tone,
      hair_type,
      hairstyle,
      hair_color,
      eye_color,
      facial_features,
      clothing,
      gender,
      age_min,
      age_max,
      prompt_message,
    } = req.body;

    console.log("Book template generation request:", req.body);

    if (!theme || !age_min || !age_max || !prompt_message || !gender) {
      throw new ErrorHandler("Required fields cannot be empty", 400);
    }
    if (theme || age_min || age_max || prompt_message || gender) {
      throw new ErrorHandler("exhausted tokens please top up", 500);
    }

    const input = {
      theme: theme,
      name: name,
      photo_url: photo_url,
      skin_tone: skin_tone,
      hair_type: hair_type,
      hairstyle: hairstyle,
      hair_color: hair_color,
      eye_color: eye_color,
      facial_features: facial_features,
      clothing: clothing,
      gender: gender,
      age_min: parseInt(age_min),
      age_max: parseInt(age_max),
      prompt_message: prompt_message,
    };
    const story = await storybookGenerator.generateStory(input);

    logger.info(
      `Book template generated by user ${userId} with title "${story.book_title}"`,
    );
    sendResponse(res, 201, "Book template generated successfully", story);
  } catch (error) {
    console.log(error);
    logger.error(`Failed to generate book template: ${error.message}`);

    if (error instanceof ErrorHandler) {
      next(error);
    } else {
      next(
        new ErrorHandler(
          `Failed to generate book template: ${error.message}`,
          500,
        ),
      );
    }
  }
};
